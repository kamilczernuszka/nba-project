!function(e){var n={};function t(s){if(n[s])return n[s].exports;var a=n[s]={i:s,l:!1,exports:{}};return e[s].call(a.exports,a,a.exports,t),a.l=!0,a.exports}t.m=e,t.c=n,t.d=function(e,n,s){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:s})},t.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s="./assets/js/lsfs.js")}({"./assets/css/lsfs.scss":
/*!******************************!*\
  !*** ./assets/css/lsfs.scss ***!
  \******************************/
/*! no static exports found */function(module,exports,__webpack_require__){eval("// extracted by mini-css-extract-plugin\n\n//# sourceURL=webpack:///./assets/css/lsfs.scss?")},"./assets/js/lsfs.js":
/*!***************************!*\
  !*** ./assets/js/lsfs.js ***!
  \***************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval('\n\nvar _lsfs = __webpack_require__(/*! ../css/lsfs.scss */ "./assets/css/lsfs.scss");\n\nvar _lsfs2 = _interopRequireDefault(_lsfs);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n"use strict";\n\n(function ($) {\n    $(function () {\n        $.fn.wake = function (callback) {\n            if (typeof callback === "function") {\n                return $(this).on("wake", callback);\n            } else {\n                return $(this).trigger("wake");\n            }\n        };\n\n        var LSFS = {\n            self: null,\n\n            timeout: lsfs.live_refresh,\n\n            live_intervals: [],\n\n            currentTime: false,\n\n            init: function init() {\n                self = this;\n                this.startLiveEvents();\n                this.liveEventForm();\n                this.startLiveLeagueTables();\n                $(document.body).on(\'lsfs_trigger_live_events\', this.refreshEventResults);\n            },\n\n            liveEventForm: function liveEventForm() {\n                if ($(".lsfs-form-live-event-results").length > 0) {\n                    $(document).on("click", ".lsfs-form-live-event-results .lsfs-button-live", function (e) {\n                        e.preventDefault();\n                        var $this = $(this),\n                            parent = $(this).parent(),\n                            event_id = $this.attr("data-id"),\n                            config_id = $this.attr("data-config"),\n                            event_type = $this.attr("data-event"),\n                            input = $this.attr("data-input"),\n                            value = false,\n                            action = "lsfs_ajax_live_",\n                            ajax_data = {};\n\n                        if (event_id) {\n                            ajax_data["event_id"] = event_id;\n                        }\n\n                        if (config_id) {\n                            ajax_data["config_id"] = config_id;\n                        }\n\n                        if (event_type) {\n                            ajax_data["type"] = event_type;\n                            action += event_type.replace(/-/g, "_");\n                        }\n\n                        if (action) {\n                            ajax_data["action"] = action;\n                        }\n\n                        if (input) {\n                            if ($(input).length > 1) {\n                                value = $(input).serializeArray();\n                            } else {\n                                value = $(input).val();\n                            }\n\n                            ajax_data["value"] = value;\n                        }\n\n                        ajax_data["nonce"] = lsfs.nonce;\n\n                        parent.find(".lsfs-notice").remove();\n\n                        $.ajax({\n                            url: lsfs.ajaxurl,\n                            dataType: "json",\n                            type: "POST",\n                            data: ajax_data,\n                            success: function success(resp) {\n                                if (resp && resp.success) {\n                                    if (resp.data.hasOwnProperty("type") && "live" === resp.data.type) {\n                                        $this.html(resp.data.message);\n                                    } else {\n                                        if (resp.data.message) {\n                                            var html = \'<div class="lsfs-notice"><p>\';\n                                            html += resp.data.message;\n                                            html += "</p></div>";\n                                            parent.append(html);\n                                            setTimeout(function () {\n                                                parent.find(".lsfs-notice").fadeOut(500);\n                                            }, 2000);\n                                        }\n\n                                        if ("pause" === resp.data.type) {\n                                            if ("pause" === event_type) {\n                                                // We are pausing the event -> Starting this live part\n                                                $("[data-config=" + config_id + "][data-event=start]").removeAttr("disabled");\n                                            } else {\n                                                $("[data-config=" + config_id + "][data-event=pause]").removeAttr("disabled");\n                                            }\n                                        }\n                                    }\n\n                                    if (resp.data.hasOwnProperty("disable") && resp.data.disable) {\n                                        $this.attr("disabled", "disabled");\n                                    }\n                                } else {\n                                    if (typeof resp.data.message !== "undefined") {\n                                        var html = \'<div class="lsfs-notice error"><p>\';\n                                        html += resp.data.message;\n                                        html += "</p></div>";\n                                        parent.append(html);\n                                        setTimeout(function () {\n                                            parent.find(".lsfs-notice").fadeOut(500);\n                                        }, 2000);\n                                    }\n                                }\n                            }\n                        });\n                    });\n                }\n            },\n\n            /**\n             * Refresh Event Results\n             * @param  object list\n             * @return void\n             */\n            refreshEventResults: function refreshEventResults(e, live) {\n\n                var $this = $(this),\n                    $live = $this.attr("data-lsfs-live"),\n                    $type = $this.attr("data-lsfs-type"),\n                    $data = { nonce: lsfs.nonce };\n\n                if (typeof $type === "undefined" || !$type) {\n                    $type = "list";\n                }\n\n                if (typeof live !== "undefined" && live) {\n                    $live = live;\n                }\n\n                switch ($type) {\n                    case "list":\n                        $data.action = "lsfs_event_results";\n                        $data.list = $live;\n                        break;\n                    case "event":\n                        $data.action = "lsfs_event_single_result";\n                        $data.event = $live;\n                        break;\n                }\n\n                $.ajax({\n                    url: lsfs.ajaxurl,\n                    data: $data,\n                    type: "GET",\n                    dataType: "json",\n                    success: function success(resp) {\n                        if (resp.success) {\n                            if (resp.data.events) {\n                                $(document.body).trigger("lsfs_refresh_events", [resp.data.events]);\n                                var results = [];\n                                for (var sp_event in resp.data.events) {\n                                    var data = resp.data.events[sp_event];\n\n                                    if ("" !== data.status || "" !== data.results) {\n                                        var event_el = $this.find("[data-live-event=" + sp_event + "]");\n\n                                        results[sp_event] = event_el.find(".data-live-results");\n                                        var results_html = results[sp_event];\n\n                                        if (results[sp_event].find("a").length) {\n                                            results_html = results[sp_event].find("a");\n                                        }\n\n                                        var old_html = results_html.html();\n                                        // Manipulate HTML only when needed\n                                        if (old_html !== data.results + data.status) {\n                                            results[sp_event].addClass("change");\n\n                                            results_html.html(data.results + data.status);\n                                        } else {\n                                            delete results[sp_event];\n                                        }\n\n                                        if (event_el.parent().find(\'.lsfs-live-scorers\').length) {\n                                            var liveScorersEl = event_el.parent().find(\'.lsfs-live-scorers\');\n                                            // We have the scorers layout.\n                                            if (data.scorers) {\n                                                liveScorersEl.removeClass(\'lsfs-hidden\');\n                                                var info = data.scorer_information || \'minutes\';\n                                                for (var team_id in data.scorers) {\n                                                    liveScorersEl.find(\'.lsfs-live-team-scorers[data-team=\' + team_id + \']\').removeClass(\'lsfs-hidden\');\n                                                    var ul = liveScorersEl.find(\'.lsfs-live-team-scorers[data-team=\' + team_id + \'] ul\');\n                                                    var scorers = data.scorers[team_id];\n                                                    ul.find(\'li\').remove();\n                                                    for (var i = 0; i < scorers.length; i++) {\n                                                        var scorer = scorers[i];\n                                                        var scorer_info = scorer[\'minutes\'];\n                                                        if (\'minutes\' !== info) {\n                                                            scorer_info = scorer[\'points\'];\n                                                        }\n                                                        ul.append(\'<li>\' + scorer[\'name\'] + \'<span class="lsfs-scorer-minutes">\' + scorer_info + \'</span></li>\');\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                setTimeout(function () {\n                                    for (var sp_event in results) {\n                                        results[sp_event].removeClass("change");\n                                    }\n                                }, 500);\n                            }\n                        }\n                    }\n                });\n            },\n\n            /**\n             * Refresh League Tables\n             * @param  object list\n             * @return void\n             */\n            refreshLeagueTables: function refreshLeagueTables(e) {\n\n                var $this = $(this),\n                    $table = $this.attr("data-lsfs-live-table"),\n                    $data = {\n                    nonce: lsfs.nonce,\n                    action: \'lsfs_league_table\',\n                    show_logo: $this.attr(\'data-lsfs-live-table-logo\'),\n                    columns: $this.attr(\'data-lsfs-live-table-columns\'),\n                    link_teams: $this.attr(\'data-lsfs-live-table-link-teams\'),\n                    table: $table\n                };\n\n                $.ajax({\n                    url: lsfs.ajaxurl,\n                    data: $data,\n                    type: "GET",\n                    dataType: "json",\n                    success: function success(resp) {\n                        if (resp.success) {\n                            var data = resp.data,\n                                dataTable = $this.find(\'.dataTables_wrapper table\').DataTable(),\n                                rows = dataTable.rows().ids().length;\n                            for (var r = 0; r < rows; r++) {\n                                dataTable.row(r).data(data[r]).draw();\n                                console.log(\'Drawwing Row: \' + r);\n                            }\n                        }\n                    }\n                });\n            },\n\n            startLiveEvents: function startLiveEvents() {\n                var lastTime = new Date().getTime();\n\n                if ($("[data-lsfs-live]").length > 0) {\n                    $("[data-lsfs-live]").wake(this.refreshEventResults);\n\n                    $("[data-lsfs-live]").each(function () {\n                        var live_id = $(this).attr("data-lsfs-live");\n\n                        self.live_intervals[live_id] = setInterval(function () {\n                            self.currentTime = new Date().getTime();\n                            $("[data-lsfs-live=" + live_id + "]").wake();\n                            lastTime = self.currentTime;\n                        }, self.timeout);\n                    });\n                }\n            },\n\n            startLiveLeagueTables: function startLiveLeagueTables() {\n                var lastTime = new Date().getTime();\n\n                if ($("[data-lsfs-live-table]").length > 0) {\n                    $("[data-lsfs-live-table]").wake(this.refreshLeagueTables);\n\n                    $("[data-lsfs-live-table]").each(function () {\n                        var live_id = $(this).attr("data-lsfs-live-table");\n\n                        self.live_intervals[live_id] = setInterval(function () {\n                            self.currentTime = new Date().getTime();\n                            $("[data-lsfs-live-table=" + live_id + "]").wake();\n                            lastTime = self.currentTime;\n                        }, self.timeout);\n                    });\n                }\n            }\n        };\n\n        LSFS.init();\n    });\n})(jQuery);\n\n//# sourceURL=webpack:///./assets/js/lsfs.js?')}});